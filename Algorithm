#include <iostream>
#include <vector>
#include <list>
#include <queue>
#include <limits.h>
#include <fstream>
#include <sstream>

using namespace std;

// Define Edge class
class Edge {
public:
    int target, weight;
    Edge(int t, int w) : target(t), weight(w) {}
};

// Function to find the vertex with minimum distance value, from the set of vertices not yet included in the shortest path tree
int minDistance(const vector<int>& dist, const vector<bool>& visited) {
    int min = INT_MAX, min_index;

    for (int v = 0; v < dist.size(); v++)
        if (!visited[v] && dist[v] <= min)
            min = dist[v], min_index = v;

    return min_index;
}

// Function to implement Dijkstra's algorithm
void dijkstra(const vector<list<Edge>>& adjList, int src, vector<int>& dist) {
    int V = adjList.size();
    vector<bool> visited(V, false);

    dist[src] = 0;

    for (int count = 0; count < V - 1; count++) {
        int u = minDistance(dist, visited);

        visited[u] = true;

        for (const auto& edge : adjList[u]) {
            int v = edge.target;
            int weight = edge.weight;
            if (!visited[v] && dist[u] != INT_MAX && dist[u] + weight < dist[v])
                dist[v] = dist[u] + weight;
        }
    }
}

// Function to print the constructed distance array
void printSolution(const vector<int>& dist) {
    cout << "Vertex \t Distance from Source" << endl;
    for (int i = 0; i < dist.size(); i++)
        cout << i << " \t\t " << dist[i] << endl;
}

// Function to populate the adjacency list from a file
void readGraph(const string& filename, vector<list<Edge>>& adjList) {
    ifstream file(filename);
    string line;

    while (getline(file, line)) {
        istringstream ss(line);
        int from, to, weight;

        ss >> from >> to >> weight;

        if (adjList.size() <= max(from, to)) {
            adjList.resize(max(from, to) + 1);
        }

        adjList[from].push_back(Edge(to, weight));
    }
}

int main() {
    vector<list<Edge>> adjList;

    // Read the graph from a file
    readGraph("towns.txt", adjList);

    // Source town for shortest path
    int sourceTown = 0; // Replace with the actual source town number
    vector<int> dist(adjList.size(), INT_MAX);

    // Run Dijkstra's algorithm
    dijkstra(adjList, sourceTown, dist);

    // Print the shortest distances
    cout << "Shortest distances from " << sourceTown << ":" << endl;
    printSolution(dist);

    return 0;
}
